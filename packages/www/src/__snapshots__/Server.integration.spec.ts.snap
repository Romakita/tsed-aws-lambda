// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Server > should generate swagger.json 1`] = `
{
  "components": {
    "schemas": {
      "GenericError": {
        "additionalProperties": true,
        "properties": {
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string",
          },
          "name": {
            "description": "The error name",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "name",
          "message",
        ],
        "type": "object",
      },
      "NotFound": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": {
              "$ref": "#/components/schemas/GenericError",
            },
            "type": "array",
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string",
          },
          "name": {
            "default": "NOT_FOUND",
            "description": "The error name",
            "example": "NOT_FOUND",
            "minLength": 1,
            "type": "string",
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string",
          },
          "status": {
            "default": 404,
            "description": "The status code of the exception",
            "example": 404,
            "type": "number",
          },
        },
        "required": [
          "name",
          "message",
          "status",
        ],
        "type": "object",
      },
      "Temperature": {
        "properties": {
          "afternoon": {
            "multipleOf": 1,
            "type": "integer",
          },
          "evening": {
            "multipleOf": 1,
            "type": "integer",
          },
          "max": {
            "multipleOf": 1,
            "type": "integer",
          },
          "min": {
            "multipleOf": 1,
            "type": "integer",
          },
          "morning": {
            "multipleOf": 1,
            "type": "integer",
          },
          "night": {
            "multipleOf": 1,
            "type": "integer",
          },
        },
        "required": [
          "min",
          "max",
          "morning",
          "afternoon",
          "evening",
          "night",
        ],
        "type": "object",
      },
      "Timeslot": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
          "description": {
            "default": "",
            "description": "Activity or Dresscode in HTML format",
            "maxLength": 500,
            "minLength": 3,
            "type": "string",
          },
          "end_date": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "format": "uuid",
            "type": "string",
          },
          "label": {
            "example": "Hiking",
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
          },
          "start_date": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
          "updated_at": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "start_date",
          "end_date",
          "label",
          "description",
          "created_at",
          "updated_at",
        ],
        "type": "object",
      },
      "TimeslotCreate": {
        "properties": {
          "description": {
            "default": "",
            "description": "Activity or Dresscode in HTML format",
            "maxLength": 500,
            "minLength": 3,
            "type": "string",
          },
          "end_date": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "format": "uuid",
            "type": "string",
          },
          "label": {
            "example": "Hiking",
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
          },
          "start_date": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "start_date",
          "end_date",
          "label",
          "description",
        ],
        "type": "object",
      },
      "TimeslotUpdate": {
        "properties": {
          "description": {
            "default": "",
            "description": "Activity or Dresscode in HTML format",
            "maxLength": 500,
            "minLength": 3,
            "type": "string",
          },
          "end_date": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "format": "uuid",
            "minLength": 1,
            "type": "string",
          },
          "label": {
            "example": "Hiking",
            "maxLength": 100,
            "minLength": 3,
            "type": "string",
          },
          "start_date": {
            "format": "date-time",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "id",
          "start_date",
          "end_date",
          "label",
          "description",
        ],
        "type": "object",
      },
      "Weather": {
        "properties": {
          "code": {
            "enum": [
              "CLEAR_SKY",
              "BROKEN_CLOUDS",
              "FEW_CLOUDS",
              "SCATERRED_CLOUDS",
              "RAIN",
            ],
            "minLength": 1,
            "type": "string",
          },
          "description": {
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "code",
          "description",
        ],
        "type": "object",
      },
      "WeatherForecast": {
        "properties": {
          "date": {
            "format": "date",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "minLength": 1,
            "type": "string",
          },
          "temperature": {
            "$ref": "#/components/schemas/Temperature",
          },
          "unit": {
            "minLength": 1,
            "type": "string",
          },
          "weather": {
            "$ref": "#/components/schemas/Weather",
          },
        },
        "required": [
          "id",
          "date",
          "unit",
          "temperature",
          "weather",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "title": "Api documentation",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/timeslots": {
      "get": {
        "operationId": "timeslotsControllerGetTimeslots",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Timeslot",
                  },
                  "type": "array",
                },
              },
            },
            "description": "Success",
          },
        },
        "tags": [
          "TimeslotsController",
        ],
      },
      "post": {
        "operationId": "timeslotsControllerCreateTimeslot",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeslotCreate",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeslot",
                },
              },
            },
            "description": "Created",
          },
        },
        "tags": [
          "TimeslotsController",
        ],
      },
    },
    "/timeslots/{id}": {
      "get": {
        "operationId": "timeslotsControllerGetTimeslotById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeslot",
                },
              },
            },
            "description": "Success",
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound",
                },
              },
            },
            "description": "Timeslot not found",
          },
        },
        "tags": [
          "TimeslotsController",
        ],
      },
      "put": {
        "operationId": "timeslotsControllerUpdateTimeslot",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeslotUpdate",
              },
            },
          },
          "required": false,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timeslot",
                },
              },
            },
            "description": "Success",
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound",
                },
              },
            },
            "description": "Timeslot not found",
          },
        },
        "tags": [
          "TimeslotsController",
        ],
      },
    },
    "/weather_forecast": {
      "get": {
        "operationId": "weatherForecastControllerGetWeaklyForecast",
        "parameters": [
          {
            "in": "query",
            "name": "city",
            "required": true,
            "schema": {
              "maximum": 100,
              "minimum": 2,
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast",
                  },
                  "type": "array",
                },
              },
            },
            "description": "Success",
          },
        },
        "tags": [
          "WeatherForecastController",
        ],
      },
    },
  },
  "tags": [
    {
      "name": "TimeslotsController",
    },
    {
      "name": "WeatherForecastController",
    },
  ],
}
`;
